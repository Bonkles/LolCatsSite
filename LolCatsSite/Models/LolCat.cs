using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.IO;
using DataImporters;

namespace MvcTestApp.Models
{
    /// <summary>
    /// This namespace contains the document models used by the site. 
    /// For now, it is just a simple LolCat. 
    /// </summary>
    [System.Runtime.CompilerServices.CompilerGenerated]
    class NamespaceDoc
    {
    }

    /// <summary>
    /// Zero-arg constructor. Not recommended for use. 
    /// </summary>
    public class LolCat
    {
        /// <summary>
        /// Creates an empty lolCat. 
        /// </summary>
        public LolCat()
        {
            Id = null;
            Cuteness = 0;
            Rating = 0;
            ImgFilePath = null;
        }
        

        /// <summary>
        /// Constructor that takes cuteness, rating, and a fully qualified image file path. 
        /// </summary>
        /// <param name="cuteness">The cuteness of the lolCat in question. Could be over 9000! </param>
        /// <param name="rating">A rating of how popular this particular kitty pic is. </param>
        /// <param name="imageFilePath">The full path name to the image on the local system.</param>
        /// <remarks>The document Id is generated by the fileName (not full file path- since document IDs can't contain slashes
        /// ) using the <see cref="fileNameFromFullPath"/> method.</remarks>
         public LolCat(int cuteness, decimal rating, string imageFilePath)
        {
            Id = fileNameFromFullPath(imageFilePath);
            Cuteness = cuteness;
            Rating = rating;
            ImgFilePath = imageFilePath; 
        }
 
    /// <summary>
    /// Constructor using only a file path string. Sets cuteness, rating to zero. 
    /// </summary>
    /// <param name="imageFilePath">The full path name to the image on the local system.</param>
    public LolCat(string imageFilePath)
        {
            Id = fileNameFromFullPath(imageFilePath); //Convert the fully qualified path to just a file name. 
            Cuteness = 0;
            Rating = 0;

        //Convert the fully qualified path to a path relative to the base image directory. 
            ImgFilePath = relativeImgPathFromFullPath(imageFilePath, ImageImporter.FullPathToImageDirectory);
        }

        /// <summary>
        /// Id property- returns the filename, i.e. 'lolcat.png'
        /// </summary>
        public string Id { get; set; }
        /// <summary>
        /// Gets/sets the Cuteness of this lolcat pic. 
        /// </summary>
        public int Cuteness { get; set; }  //Cuteness - an integer with no bounds.

        /// <summary>
        /// Gets/sets the Rating of this particular lolCat pic. 
        /// </summary>
        public decimal Rating { get; set; }  //A rating from 0-10.0

        /// <summary>
        /// Gets/sets the fully qualified image path name on the local system.
        /// </summary>
        public string ImgFilePath { get; set; } //The relative filepath where the image is kept.

        /// <summary>
        /// A static helper function that other code can call.
        /// </summary>
        /// <param name="fullFilePath">A fully qualified image path name, i.e. 'c:\Users\Administrator\cat.jpg' </param>
        /// <returns>Just the filename, without the directories- i.e. 'cat.jpg'</returns>
        public static string fileNameFromFullPath(string fullFilePath)
        {
            FileInfo fi = new FileInfo(fullFilePath);
            return fi.Name; 
        }

        /// <summary>
        /// Converts a full file path to a relative file path, using the <see cref="directoryName"/> as the basis for the relative path.
        /// </summary>
        /// <param name="fullFilePath">A fully qualified image path name, i.e. 'c:\Users\Administrator\cat.jpg' </param>
        /// <param name="directoryName">A fully qualified directory name, i.e. 'c:\Users\'</param>
        /// <returns>Just the filename, relative to the base directory- i.e. 'Administrator\cat.jpg', or 'null' if the relative path did not work with the filename.</returns>
        public static string relativeImgPathFromFullPath(string fullFilePath, string directoryName)
        {            
            //First, make sure that the directoryName is not of equal size or longer than the full file path. 
            if (fullFilePath.Length <= directoryName.Length)
                return null; 

            //Next, make sure that the directoryName is a substring of the fullFilePath.
            //We perform a simple check- get the substring at the beginning of the full file path that is equal in 
            //length to the directory Name. If that happens to equal the directory name- we assume that this is good enough. 
            if (!fullFilePath.Substring(0, directoryName.Length).Equals(directoryName)) 
                return null; 
            
            FileInfo fi = new FileInfo(fullFilePath);
            DirectoryInfo di = new DirectoryInfo(directoryName);


            //Return the string that starts one character beyond the directory name, and ends at the end of the full file path string. 
            string returnString = fullFilePath.Substring(directoryName.Length, fullFilePath.Length - directoryName.Length);
 
            //Finally, we need to use these path names inside a web URL, therefore 
            //backslashes '\' are not allowed. We must instead use forward slashes. 

            String newReturnString = returnString.Replace('\\', '/');
            return newReturnString; 

        }   
    }
}